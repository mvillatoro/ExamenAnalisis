// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UnitTestProject1
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class TestsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Tests.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Tests", "\tIn order to avoid silly mistakes\r\n\tWe do silly tests\r\n\tSo we can try not to fuck" +
                    " shit up", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Tests")))
            {
                UnitTestProject1.TestsFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Shopping Cart Checkout")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Tests")]
        public virtual void ShoppingCartCheckout()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Shopping Cart Checkout", ((string[])(null)));
#line 7
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "User",
                        "State",
                        "Date"});
            table1.AddRow(new string[] {
                        "1",
                        "Carlos",
                        "Pending",
                        "08/06/16"});
#line 8
 testRunner.Given("I have this ShoppingCart item", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "CartId",
                        "ProductId",
                        "Quantity"});
            table2.AddRow(new string[] {
                        "0",
                        "1",
                        "1",
                        "2"});
            table2.AddRow(new string[] {
                        "1",
                        "1",
                        "2",
                        "3"});
            table2.AddRow(new string[] {
                        "2",
                        "1",
                        "3",
                        "1"});
#line 11
 testRunner.And("The items in the cart are", ((string)(null)), table2, "And ");
#line 16
 testRunner.And("There is enough inventory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 17
 testRunner.When("I make the checkout", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 18
 testRunner.Then("The total amount of the cart is 1800", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "ProductId",
                        "Quantity",
                        "Type",
                        "Date"});
            table3.AddRow(new string[] {
                        "1",
                        "1",
                        "5",
                        "Purchase",
                        "10/06/16"});
            table3.AddRow(new string[] {
                        "2",
                        "2",
                        "5",
                        "Purchase",
                        "10/06/16"});
            table3.AddRow(new string[] {
                        "3",
                        "3",
                        "5",
                        "Purchase",
                        "10/06/16"});
            table3.AddRow(new string[] {
                        "4",
                        "1",
                        "2",
                        "Sale",
                        "10/06/16"});
            table3.AddRow(new string[] {
                        "5",
                        "2",
                        "3",
                        "Sale",
                        "10/06/16"});
            table3.AddRow(new string[] {
                        "6",
                        "3",
                        "1",
                        "Sale",
                        "10/06/16"});
#line 19
 testRunner.And("We subtract the quantity buyed", ((string)(null)), table3, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Checkout with out of stock")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Tests")]
        public virtual void CheckoutWithOutOfStock()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Checkout with out of stock", ((string[])(null)));
#line 28
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "User",
                        "State",
                        "Date"});
            table4.AddRow(new string[] {
                        "1",
                        "Carlos",
                        "Pending",
                        "08/06/16"});
#line 29
  testRunner.Given("I have this ShoppingCart item", ((string)(null)), table4, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "CartId",
                        "ProductId",
                        "Quantity"});
            table5.AddRow(new string[] {
                        "0",
                        "1",
                        "1",
                        "10"});
            table5.AddRow(new string[] {
                        "1",
                        "1",
                        "2",
                        "3"});
            table5.AddRow(new string[] {
                        "2",
                        "1",
                        "3",
                        "1"});
#line 32
 testRunner.And("The items in the cart are", ((string)(null)), table5, "And ");
#line 37
 testRunner.And("There is not  enough inventory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 38
 testRunner.When("I make the checkout", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 39
 testRunner.Then("Send an error email", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Check old pending shopping carts")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Tests")]
        public virtual void CheckOldPendingShoppingCarts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check old pending shopping carts", ((string[])(null)));
#line 41
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "day",
                        "month",
                        "year"});
            table6.AddRow(new string[] {
                        "08",
                        "06",
                        "2016"});
#line 42
  testRunner.Given("I have a date", ((string)(null)), table6, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "User",
                        "State",
                        "Date"});
            table7.AddRow(new string[] {
                        "1",
                        "Edwin",
                        "Pending",
                        "08/07/2016"});
            table7.AddRow(new string[] {
                        "2",
                        "Edwin",
                        "Pending",
                        "09/06/2016"});
            table7.AddRow(new string[] {
                        "3",
                        "Carlos",
                        "Pending",
                        "09/07/2016"});
            table7.AddRow(new string[] {
                        "3",
                        "Edwin",
                        "Paid",
                        "09/07/2016"});
#line 45
  testRunner.And("a list of ShoppingCarts", ((string)(null)), table7, "And ");
#line 51
  testRunner.And("the user \"Edwin\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "User",
                        "State",
                        "Date"});
            table8.AddRow(new string[] {
                        "2",
                        "Edwin",
                        "Pending",
                        "08/07/2016"});
#line 52
  testRunner.Then("we get the ShoppingCart", ((string)(null)), table8, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Products in stock must be correct")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Tests")]
        public virtual void ProductsInStockMustBeCorrect()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Products in stock must be correct", ((string[])(null)));
#line 56
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "Code",
                        "Name",
                        "Description",
                        "Price"});
            table9.AddRow(new string[] {
                        "1",
                        "001",
                        "USB",
                        "2 GB Black",
                        "200"});
            table9.AddRow(new string[] {
                        "2",
                        "002",
                        "Monitor",
                        "40 pulgadas",
                        "300"});
            table9.AddRow(new string[] {
                        "3",
                        "003",
                        "SSD",
                        "1 TB Black",
                        "500"});
#line 57
 testRunner.Given("I have this products", ((string)(null)), table9, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Id",
                        "ProductId",
                        "Quantity",
                        "Type",
                        "Date"});
            table10.AddRow(new string[] {
                        "1",
                        "1",
                        "5",
                        "Purchase",
                        "10/06/16"});
            table10.AddRow(new string[] {
                        "2",
                        "2",
                        "5",
                        "Purchase",
                        "10/06/16"});
            table10.AddRow(new string[] {
                        "3",
                        "3",
                        "5",
                        "Purchase",
                        "10/06/16"});
            table10.AddRow(new string[] {
                        "4",
                        "1",
                        "2",
                        "Sale",
                        "10/06/16"});
            table10.AddRow(new string[] {
                        "5",
                        "2",
                        "3",
                        "Sale",
                        "10/06/16"});
            table10.AddRow(new string[] {
                        "6",
                        "3",
                        "1",
                        "Sale",
                        "10/06/16"});
#line 63
 testRunner.And("I have an list of inventory movements", ((string)(null)), table10, "And ");
#line 72
 testRunner.When("I create the report", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductId",
                        "Quantity"});
            table11.AddRow(new string[] {
                        "1",
                        "3"});
            table11.AddRow(new string[] {
                        "2",
                        "2"});
            table11.AddRow(new string[] {
                        "3",
                        "4"});
#line 73
 testRunner.Then("The total products in stock must be correct", ((string)(null)), table11, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
